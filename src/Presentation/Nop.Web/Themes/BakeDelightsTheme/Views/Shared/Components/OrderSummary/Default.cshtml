@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
<div class="order-summary-content">
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_before" })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="panel panel-default cart-item-table">
                @await Html.PartialAsync("_ShoppingCartItems", Model)
                @if (Model.IsEditable)
                {
                    <div class="update-continue-button">
                        <div class="common-buttons pull-right">
                            <div class="continue-shopping"><input type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")" class="btn btn-default continue-shopping-button" /></div>
                            <div class="update-cart"><input type="submit" name="updatecart" onclick="ordertable();" value="@T("ShoppingCart.UpdateCart")" class="btn btn-primary update-cart-button" /></div>
                        </div>
                    </div>
                }
            </div>
            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }
            <div class="buttons checkout-attribute">
                @if (Model.IsEditable)
                {
                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                }
                <div class="selected-checkout-attributes">
                    @await Component.InvokeAsync("SelectedCheckoutAttributes")
                </div>
            </div>
            <div class="cart-footer row">
                @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_cart_footer" })
                @if (Model.IsEditable)
                {
                    if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                    {
                        <div class="col-md-12">
                            <div class="min-amount-warning">
                                @Model.MinOrderSubtotalWarning
                            </div>
                        </div>
                    }
                }
                @if (Model.IsEditable)
                {
                    <div class="col-sm-6 col-md-4">
                        <div class="cart-collaterals">
                            <div class="deals">
                                @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                                @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_deals" })
                            </div>
                            <div class="deals">
                                @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                            </div>
                        </div>
                    </div>
                }
                @if (Model.IsEditable)
                {
                    <div class="col-sm-6 col-md-4">
                        @await Component.InvokeAsync("EstimateShipping")
                    </div>
                }
                <div class="col-xs-offset-0 col-sm-offset-3 col-md-offset-0 col-xs-12 col-sm-6 col-md-4 pull-right order-totals">
                    <div class="totals">
                        @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                        @if (Model.IsEditable)
                        {
                            if (Model.TermsOfServiceOnShoppingCartPage)
                            {
                                <div class="modal fade" id="terms-of-service-warning-box" tabindex="-1" role="dialog" aria-labelledby="@T("Checkout.TermsOfService")" aria-hidden="true">
                                    <div class="modal-dialog modal-sm">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                                                <h4 class="modal-title">@T("Checkout.TermsOfService")</h4>
                                            </div>
                                            <div class="modal-body">
                                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="terms-of-service">
                                    <input id="termsofservice" type="checkbox" name="termsofservice" />
                                    <p>
                                        <label for="termsofservice">
                                            @T("Checkout.TermsOfService.IAccept")
                                            @if (Model.TermsOfServicePopup)
                                            {
                                                <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                                <script type="text/javascript" asp-location="Footer">
                                                    $(document).ready(function() {
                                                        $('#read-terms').on('click',
                                                            function(e) {
                                                                e.preventDefault();
                                                                displayPopupContentFromUrl(
                                                                    '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
                                                                    '@T("Checkout.TermsOfService")');
                                                            });
                                                    });
                                                </script>
                                            }
                                            else
                                            {
                                                <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new {SeName = Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                            }
                                        </label>
                                    </p>
                                </div>
                            }
                            <div class="checkout-buttons">
                                @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                                {
                                    <script type="text/javascript" asp-location="Footer">
                                                    $(document).ready(function () {
                                                        $('#checkout').click(function () {
                                                            //terms of services
                                                            var termOfServiceOk = true;
                                                            if ($('#termsofservice').length > 0) {
                                                                //terms of service element exists

                                                                if (!$('#termsofservice').is(':checked')) {
                                                                    //$("#terms-of-service-warning-box").dialog();
                                                                    $("#terms-of-service-warning-box").modal();
                                                                    termOfServiceOk = false;
                                                                }
                                                                else {
                                                                    termOfServiceOk = true;
                                                                }

                                                            }
                                                            return termOfServiceOk;
                                                        });
                                                    });
                                    </script>
                                    <button type="submit" id="checkout" name="checkout" value="checkout" class="btn btn-primary btn-lg checkout-button checkout-new">
                                        <i class="fa fa-shopping-basket"></i> <span>@T("Checkout.Button")</span>
                                    </button>
                                }
                            </div>
                            <div class="addon-buttons">
                                @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                                {
                                    @await Component.InvokeAsync(pm)
                                }
                            </div>
                        }
                    </div>

                </div>
            </div>
            @if (Model.IsEditable)
                {
                @await Component.InvokeAsync("CrossSellProducts")
            }
        </form>
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_after" })
</div>
@*JavaScript for mobile and desktop resize*@
<script type="text/javascript">
    function ordertable() {
        var docWidth = $(document).width();
        if (docWidth > 767) {
            //mobile
            $("tr.mobile-duplicate").html("");
        } else {
            //desktop
            $("tr.desktop-original").html("");
        }
    }



    $(document).ready(function () {
        $('.removefromcartimg').click(function (e) {
            var productId = $(this).attr("data-productid");
            $(":checkbox").filter(function () {
                return this.value == productId;
            }).prop("checked", "true");
            $(".update-cart-button").trigger("click");
        });
    });
</script>

